#===========================================================================
# FILE: Makefile_root
#===========================================================================
# Copyright 2007 Delphi Technologies, Inc., All Rights Reserved.
# Delphi Confidential
#---------------------------------------------------------------------------
# %full_filespec: Makefile_root~kok_inf#6:makefile:kok_aud#2 %
# %version: kok_inf#6 %
# %derived_by: wzj1t9 %
# %date_modified: Mon Apr 21 07:24:15 2014 %
#---------------------------------------------------------------------------
#
# DESCRIPTION:
# ------------
# This root makefile is a template that can be copied to an MDF's root
# directory, renamed 'Makefile', and customized to build the MDF by referring
# to the comments.
#
#===========================================================================

###############################################################################
# Build Definition
##################

#
# BUILD_LIST must contain a non-empty list of identifiers for builds
# to be performed. These identifiers are used to place generated files into
# separate areas.
#
###BUILD_LIST := pc
#
# For each of the builds specified in BUILD_LIST, a variable named
# <build>_FLAVOR must be created and its value must be the name of the
# "flavor" associated with the build. The "flavor" identifies the tools
# used for the build and the definitions for these tools must be found
# in the MAKE_INCL_DIR within files named <flavor>_def.mak, 
# <flavor>_epilog.mak, and <flavor>_prolog.mak.
#
###pc_FLAVOR := win32_gcc

###############################################################################
# Project Configuration
########################
#
# PROJECT_CFG_ROOT is optional. If used it contains a list of paths to
# subdirectories that contain configuration header files. For each directory
# path "<dirpath>" in the list, the include paths "<dirpath>/<build>" and
# "<dirpath>" are added to the default compiler include paths (in that order).
# This means that configuration header files will first be taken from the
# build-specific path, then from the "common" path.
#
###PROJECT_CFG_ROOT := cfg
#
# MAKE_INCL_DIR is the name of the subdirectory containing the reusable make
# rules that analyze the project's contents and generate the project-specific
# rules.
#
###MAKE_INCL_DIR := bb_basa_make

###############################################################################
# Tool Options
########################
#
# Any definitions to override the tool options for the builds goes here.
#

###############################################################################
# Makefile Selection
#####################
#
# Any subdirectory containing a file named "Makefile*.mk" is called a "module".
# By default, any module with only one Makefile*.mk in it is automatically
# associated with each build; no definition is required to cause this to
# happen. 
#
# If a module has more than one Makefile*.mk, then it is required that
# a variable whose name is of the form "<build>-<modulename>" be assigned
# the name of the Makefile to be used; otherwise, an error will be reported.
# The name of the module (<modulename>) is the name of the leaf directory in
# the path to the module. All such leaf names are required to be unique within
# the project so they can uniquely identify the module.
#
# The value "NONE" (without quotes) can be assigned to the variable to exclude
# the module from the build. This can also be done if there is only one
# Makefile in the module. This is useful for modules containing hardware-
# specific code to exclude them from builds not associated with their
# hardware; e.g., PC unit test.
#
###pc-bb_basa_mdf_generator := NONE

###############################################################################

###############################################################################
# Shared library linking options
#####################
# This section sets up how this mdf's dependencies are linked, shared or static,
# as well as allowing a project wide place to change from one implementation to 
# another with the same API.
# Example linking lib foo statically:
# <build>_foo_lib       :=  foo.a
# Example linking lib foo shared:
# <build>_foo_lib       :=  foo.so
###############################################################################


#
# ... and then let the reusable project rules do the rest
#
include $(MAKE_INCL_DIR)/project.mak

#===========================================================================
# File Revision History (top to bottom: first revision to last revision)
#===========================================================================
#
# Date        Name      (Description on following lines: SCR #, etc.)
# ----------- --------
# 08-dec-2006 kirk bailey
# + Created file.
#
# 16-jan-2007 kirk bailey
# + Improved example comments.
#
# 22-mar-2007 kirk bailey
# + Fixed comments. Removed PROJECT_NAME.
#
# 06-dec-2007 kirk bailey
# + Changed "userid" to "Name" in revision history.
#
# 21-Apr-2014 Joel Kiger
# + Added shared object examples to template
#
#===========================================================================
